const e=`# JavaScript\r
\r
## Introducci√≥n\r
\r
**JavaScript** es un lenguaje de programaci√≥n o secuencias de comandos que posibilita la creaci√≥n de funciones complejas en p√°ginas web. Cuando una p√°gina web va m√°s all√° de simplemente mostrar informaci√≥n est√°tica y comienza a ofrecer actualizaciones oportunas de contenido, mapas interactivos, animaci√≥n de gr√°ficos _2D_/_3D_, reproducci√≥n de videos con capacidad de desplazamiento, entre otros, es muy probable que **JavaScript** est√© desempe√±ando un papel fundamental. Este lenguaje representa la tercera capa en el conjunto de tecnolog√≠as web est√°ndar, complementando a las dos anteriores (**HTML** y **CSS**) que ya hemos explorado en secciones anteriores.\r
\r
**JavaScript** es oficialmente considerado un lenguaje de programaci√≥n, ya que **HTML** se utiliza para definir la estructura de un sitio web y **CSS** para posicionar y dar estilo a esta estructura. Ninguno de estos dos lenguajes est√° destinado a la programaci√≥n en el sentido tradicional. Los lenguajes de programaci√≥n, en cambio, permiten el uso de variables, funciones, bucles y estructuras condicionales, tal como lo hace **JavaScript**.\r
\r
Este lenguaje posee una amplia gama de aplicaciones y herramientas. Se encuentra entre los lenguajes m√°s populares y queridos en la comunidad de desarrollo, aunque tambi√©n atrae cierta cr√≠tica por ciertos aspectos distintivos. Estas diferencias se vuelven m√°s notables a medida que adquieres experiencia con otros lenguajes de programaci√≥n. Te recomiendo que, despu√©s de dominar **JavaScript**, consideres aprender otro lenguaje como **Python**, **C#**, **Java**, entre otros. Esto ampliar√° tu comprensi√≥n del mundo de la programaci√≥n y te permitir√° apreciar las similitudes y diferencias entre los diversos lenguajes.\r
\r
En mi experiencia personal, ampliar mi conocimiento a otros lenguajes, como **Python** y **C#**, despu√©s de haber trabajado con **JavaScript**, proporcion√≥ una nueva perspectiva y enriqueci√≥ mi comprensi√≥n de la programaci√≥n. Sin embargo, es importante destacar que intentar dominar demasiados lenguajes puede llevar a la confusi√≥n y a la falta de dominio en ellos, lo que puede limitar tu progreso. Por lo tanto, es recomendable enfocarse en uno o dos lenguajes que domines profundamente y tener un conocimiento b√°sico de otros. Esto te permitir√° concentrarte en los lenguajes que realmente importan para tus objetivos y proyectos.\r
\r
Adem√°s, es relevante mencionar que **JavaScript** no se limita al _Front-end_. Tambi√©n se utiliza en el _Back-end_ a trav√©s de **Node.js**, que permite ejecutar c√≥digo **JavaScript** en el servidor. **Node.js** compila el c√≥digo **JavaScript** para que sea legible por la m√°quina. Aunque principalmente se asocia con el _Back-end_, algunas de sus caracter√≠sticas, como el gestor de paquetes **npm**, tambi√©n se aplican en el _Front-end_.\r
\r
Tendr√°s la oportunidad de profundizar en el aprendizaje de este lenguaje y su aplicaci√≥n a trav√©s de los recursos que te proporcionar√© a continuaci√≥n. Estos recursos te ayudar√°n a comprender c√≥mo utilizar **JavaScript** en su totalidad.\r
\r
## Tutorial\r
\r
Cuando se trata de dominar y aprender **JavaScript**, es importante tener en cuenta que requerir√° m√°s esfuerzo y tiempo. Existen diversas formas y recursos para adentrarse en el mundo de **JavaScript**, pero quiero destacar esta lista de reproducci√≥n en _YouTube_ que considero uno de los m√°s completos y detallados que he encontrado. Dado que el contenido es extenso, te recomiendo planificar c√≥mo vas a organizar y aprovechar todo el c√≥digo e informaci√≥n proporcionados en esta gu√≠a:\r
\r
-   **[Curso JavaScript](https://www.youtube.com/playlist?list=PLvq-jIkSeTUZ6QgYYO3MwG9EMqC-KoLXA)**\r
\r
-   Tambi√©n te dejo una selecci√≥n de videos relacionados con **JavaScript**, enfocados en buenas pr√°cticas y consejos para programar de manera efectiva:\r
    -   **[¬°Aprende los nuevos m√©todos de Array para JavaScript!](https://www.youtube.com/watch?v=TJKAGh9jzx4)**\r
\r
## Recursos\r
\r
-   P√°ginas de consejos y buenas pr√°cticas de **JavaScript**:\r
\r
    -   **[24 buenas pr√°cticas de JavaScript para principiantes](https://code.tutsplus.com/es/24-javascript-best-practices-for-beginners--net-5399t)**\r
    -   **[airbnb/javascript: JavaScript Style Guide](https://github.com/airbnb/javascript)**\r
\r
## Consejos, Trucos y Buenas Pr√°cticas\r
\r
-   Opta por utilizar \`===\` en lugar de \`==\`, ya que \`==\` solo verifica el valor, sin considerar el tipo de dato, mientras que \`===\` eval√∫a tanto el valor como el tipo de dato. Aqu√≠ tienes un ejemplo:\r
\r
    \`\`\`javascript\r
    let a = 3;\r
\r
    console.log(a == 3); // Devolver√° verdadero\r
    console.log(a === 3); // Devolver√° verdadero\r
\r
    console.log(a == "3"); // 3 == "3" Devolver√° verdadero\r
    console.log(a === "3"); // 3 === "3" Devolver√° falso\r
    \`\`\`\r
\r
-   Evita el uso de \`eval()\`, ya que no solo reducir√° significativamente el rendimiento de tu script, sino que tambi√©n representar√° un riesgo de seguridad al otorgar demasiados privilegios al texto proporcionado.\r
\r
-   Siempre prefiere la palabra clave \`let\` en lugar de \`var\` al declarar variables. Para una explicaci√≥n breve y concisa, puedes consultar este corto video en _YouTube_: **[¬øUso let o var? | #JavaScript](https://www.youtube.com/shorts/cFD9bB3UEtY)**.\r
\r
-   Aunque pueda parecer innecesario inicialmente, te aseguro que comentar tu c√≥digo de manera efectiva es esencial. Imagina regresar a tu proyecto meses despu√©s y descubrir que no recuerdas el prop√≥sito de cada fragmento de c√≥digo. Adem√°s, considera la posibilidad de que un colega deba revisar tu trabajo; sin comentarios, podr√≠an perderse en la complejidad. Por estas razones, los comentarios son valiosos e incluso cruciales. Por lo tanto, no olvides agregar comentarios siempre a las secciones clave de tu c√≥digo.\r
\r
-   Aunque t√©cnicamente es posible omitir los puntos y comas en tu c√≥digo, es recomendable evitar esta pr√°ctica. Esto podr√≠a causar problemas y dificultades en el futuro. Por lo tanto, sigue utilizando puntos y comas al final de cada l√≠nea para garantizar la claridad y la interpretaci√≥n correcta del c√≥digo.\r
\r
-   El uso de librer√≠as o _frameworks_ puede facilitar el desarrollo de tu aplicaci√≥n, pero evita depender en exceso de ellos. Esto podr√≠a afectar el rendimiento y reducir tu habilidad para programar. √ösalos sin problemas, siempre y cuando puedas programar lo que ofrece la librer√≠a o el _framework_ por ti mismo y si su impacto es m√°s positivo que negativo en tu caso.\r
\r
-   Es mucho mejor utilizar los nuevos m√©todos de arreglos como \`array.toSorted()\` y \`array.toReversed()\` para reordenar los arreglos en lugar de usar \`array.reverse()\` o \`array.sort()\`. Esto se debe a que los nuevos m√©todos crean una copia del arreglo al que se aplica el m√©todo, mientras que los antiguos modifican el arreglo original, lo que provoca que no puedas mantener el orden del arreglo original a menos que crees una copia por ti mismo.\r
\r
-   Para hacer copias de arreglos, hay muchos m√©todos. El m√°s sencillo en mi opini√≥n es usar el Operador de Propagaci√≥n (_Spread Operator_):\r
\r
    \`\`\`js\r
    let arr = [1, 2, 3];\r
    let arrCopy = [...arr];\r
\r
    arrCopy.push(4);\r
\r
    // arr = [1, 2, 3]\r
    // arrCopy = [1, 2, 3, 4]\r
    \`\`\`\r
\r
    Sin embargo, esto no funcionar√≠a para arreglos bidimensionales (arreglos que contienen otros arreglos):\r
\r
    \`\`\`js\r
    let arr = [[1, 2], [3]];\r
    let arrCopy = [...arr];\r
\r
    arrCopy[1].push(4);\r
\r
    // arr = [[1, 2], [3, 4]]\r
    // arrCopy = [[1, 2], [3, 4]]\r
    \`\`\`\r
\r
    Hay dos simples maneras de hacer copias de arreglos bidimensionales:\r
\r
    1. Usando el m√©todo \`slice()\` con \`map()\`:\r
\r
        \`\`\`js\r
        let arr = [[1, 2], [3]];\r
        let arrCopy = arr.map((item) => item.slice());\r
\r
        arrCopy[1].push(4);\r
\r
        // arr = [[1, 2], [3]]\r
        // arrCopy = [[1, 2], [3, 4]]\r
        \`\`\`\r
\r
    2. Convertir a formato **JSON** y luego decodificarlo en **JavaScript**:\r
\r
        \`\`\`js\r
        let arr = [[1, 2], [3]];\r
        let arrCopy = JSON.parse(JSON.stringify(arr));\r
\r
        arrCopy[1].push(4);\r
\r
        // arr = [[1, 2], [3]]\r
        // arrCopy = [[1, 2], [3, 4]]\r
        \`\`\`\r
\r
    Puedes encontrar m√°s informaci√≥n sobre este tema en el siguiente art√≠culo: **[Deep Copying JavaScript Arrays](https://medium.com/@ziyoshams/deep-copying-javascript-arrays-4d5fc45a6e3e)**\r
\r
-   Puedes intercambiar el valor de dos variables utilizando la destructuraci√≥n:\r
\r
    \`\`\`js\r
    let a = 8;\r
    let b = 6;\r
\r
    [a, b] = [b, a];\r
\r
    // a = 6\r
    // b = 8\r
    \`\`\`\r
\r
-   Puedes crear ciclos usando la recursi√≥n, que es una forma m√°s compleja y eficiente de iterar. Para aplicar la recursi√≥n, debes crear una funci√≥n que se llame a s√≠ misma y que tenga una condici√≥n al principio para que el llamado recursivo se detenga. Dado que esto es un tema bastante complejo, te dejo algunos recursos para que puedas aprender m√°s:\r
\r
    -   **[La MAGIA de la RECURSIVIDAD](https://www.youtube.com/watch?v=yX5kR63Dpdw)**\r
    -   **[üë®‚Äçüè´ Resuelve Fibonacci con JavaScript: soluci√≥n con recursividad y con bucles](https://www.youtube.com/watch?v=6ji-oYS6EgM)**\r
\r
-   Las expresiones regulares son fundamentales para buscar palabras o t√©rminos en cualquier texto. Sin embargo, aplicarlas puede resultar tedioso y es f√°cil olvidarlas si no las utilizas constantemente. Por eso, te dejo una hoja de referencia de sintaxis de expresiones regulares y ejercicios de **FreeCodeCamp** para que practiques:\r
\r
    -   **[Hoja de referencia de sintaxis de expresiones regulares](https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Regular_expressions/Cheatsheet)**\r
    -   **[Ejercicios con expresiones regulares](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/#regular-expressions)**\r
\r
## Ejercicios y Proyectos\r
\r
-   En **[Exercism](https://exercism.org/tracks/javascript/exercises)** puedes desarrollar y mejorar tu logica y eficacia de programacion en cualquier lenguaje. En el apartado de **JavaScript** te ofrecen mas de 140 ejercicios de programacion.\r
\r
-   **[JavaScript Algorithms and Data Structures - FreeCodeCamp](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/)** te ofrece un curso con ejercicios practicos y con un certificado ampliamente reconocido.\r
\r
## Conclusi√≥n\r
\r
Y as√≠ concluimos nuestra exploraci√≥n de **JavaScript**. Ahora has adquirido las tres bases fundamentales de la programaci√≥n web, puedes crear paginas web con solo estes 3 lenguajes. Lo que exploraremos a continuaci√≥n son tecnolog√≠as, librer√≠as y herramientas que te capacitar√°n para mejorar significativamente el desarrollo y aumentar tus posibilidades de encontrar trabajo, siempre y cuando tengas el conocimiento y la experiencia en estas opciones.\r
\r
Sin embargo, es pr√°cticamente imposible entrar en el mercado laboral sin tener conocimiento en estas tecnolog√≠as. Si tu objetivo es buscar empleo, aprenderlas y dominarlas ser√° un requisito esencial. Por otro lado, si se trata de desarrollo personal, son m√°s opcionales.\r
`;export{e as default};
